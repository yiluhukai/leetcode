//给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。 
//
// 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。 
//
// 
//
// 示例 1: 
//
// 给定数组 nums = [1,1,2], 
//
//函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 
//
//你不需要考虑数组中超出新长度后面的元素。 
//
// 示例 2: 
//
// 给定 nums = [0,0,1,1,1,2,2,3,3,4],
//
//函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。
//
//你不需要考虑数组中超出新长度后面的元素。
// 
//
// 
//
// 说明: 
//
// 为什么返回数值是整数，但输出的答案是数组呢? 
//
// 请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。 
//
// 你可以想象内部操作如下: 
//
// // nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
//int len = removeDuplicates(nums);
//
//// 在函数里修改输入数组对于调用者是可见的。
//// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。
//for (int i = 0; i < len; i++) {
//    print(nums[i]);
//}
// 
// Related Topics 数组 双指针 
// 👍 1754 👎 0

package main
//leetcode submit region begin(Prohibit modification and deletion)

/*
	暴力解法:由于数组是有序的,所以相同的元素肯定在一块遍历数组,比较相邻的两个元素,当元素的值相等的时候,
	将后面的元素向前平移一位,同时，数组的长度-1。
*/
//解答成功:
//执行耗时:88 ms,击败了5.30% 的Go用户
//内存消耗:4.6 MB,击败了6.05% 的Go用户
//func removeDuplicates(nums []int) int {
//	length :=len(nums)
//	for i:=0;i<length-1;{
//		// 比较相邻的元素
//		if nums[i] == nums[i+1] {
//			//  移动元素去覆盖i+1的位置
//			for j:=i+1;j<length-1;j++{
//				nums[j] = nums[j+1]
//			}
//			//  数组的长度-1
//			length--
//		}else{
//			i++
//		}
//	}
//	return length
//}
/*
	优化的思路：暴力解法中，当两个位置的元素相等时，每次都要移动所有元素，且移动完成后，后面的元素还有可能前移，
	我们优化的思路就是想让重复的元素一次移动到最终的位置
	最优解：使用双指针去记录目标位置和待移动元素的位置（下标）,
	当两个位置的元素相等时，待移动元素的位置加1。
	当两个位置的元素不相等时，目标位置加1，然后将待移动位置的元素赋值给目标位置,待移动位置的索引+1
	当待移动位置的元素大于数组的长度-1时,退出遍历
	然后返回新数组的长度： 目标位置的索引+1
	当目标位置的索引等于待移动元素的索引时，直接让待移动位置的索引+1
*/

//执行耗时:8 ms,击败了86.62% 的Go用户
//内存消耗:4.6 MB,击败了96.19% 的Go用户
func removeDuplicates(nums []int) int {
	length :=len(nums)
	if length == 0{
		return length
	}
	target:=0
	for remove:=1;remove<length;remove++{
		// 当目标位置的索引等于待移动元素的索引时，直接让待移动位置的索引+1
		if  nums[target] != nums[remove]{
			target++
			nums[target] = nums[remove]
		}
	}
	return target+1
}
//leetcode submit region end(Prohibit modification and deletion)


